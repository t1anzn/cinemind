---
import Layout from "../../layouts/Layout.astro";
import MovieHeader from "../../components/MovieHeader";
import MovieOverview from "../../components/MovieOverview";
import MovieDetails from "../../components/MovieDetails";
import MovieTags from "../../components/MovieTags";
import MovieReviews from "../../components/MovieReviews";
import FinancialOverview from "../../components/FinancialOverview";
import MovieMedia from "../../components/MovieMedia.jsx";
import * as movieDisplayUtils from "../../utils/movieDisplayUtils.jsx";
import { useState } from "react";

export async function getStaticPaths() {
  try {
    const res = await fetch("http://127.0.0.1:5000/movies/ids");
    const data = await res.json();

    const paths = data.map((movie: { id: number }) => ({
      params: { id: movie.id.toString() },
    }));

    return paths;
  } catch (error) {
    console.error("Error generating static paths:", error);
    return [];
  }
}

const { id } = Astro.params;

let movie: {
  budget: number;
  revenue: number;
  title: unknown;
  release_date: any;
  backdrop_url: string | null | undefined;
  poster_url: string | null | undefined;
  vote_average: number;
  vote_count: number;
  runtime: any;
  popularity: number;
  tagline: string;
  status: string;
  genres: string[];
  overview: string;
  keywords: string[];
  cast: any[];
  original_language: string;
  production_countries: string[];
  spoken_languages: string[];
  reviews: string;
} = {
  budget: 0,
  revenue: 0,
  title: "Unknown",
  release_date: null,
  backdrop_url: null,
  poster_url: null,
  vote_average: 0,
  vote_count: 0,
  runtime: null,
  popularity: 0,
  status: "Unknown",
  genres: [],
  overview: "No overview available.",
  keywords: [],
  cast: [],
  tagline: "No tagline available.",
  original_language: "Unknown",
  production_countries: [],
  spoken_languages: [],
  reviews: "Unknown",
};

let error = null;
let sentiment = null;

try {
  // Fetch movie by ID
  const response = await fetch(`http://127.0.0.1:5000/movies/${id}`);
  if (!response.ok) {
    throw new Error("Movie not found");
  }
  movie = await response.json();

  // Fetch sentiment analysis for the movie
  const sentimentResponse = await fetch(
    `http://127.0.0.1:5000/movies/${id}/sentiment`
  );
  if (sentimentResponse.ok) {
    const sentimentData = await sentimentResponse.json();
    sentiment = sentimentData.sentiment_analysis;
  } else {
    console.error("Failed to fetch sentiment analysis");
  }
} catch (e) {
  error = e instanceof Error ? e.message : "An unknown error occurred";
}
---

<Layout
  title={movie
    ? `${movie.title} - (${movieDisplayUtils.getReleaseYear(movie.release_date)}) - CineMind`
    : "Movie Not Found"}
>
  <>
    <MovieHeader movie={movie} />

    <div class="content-wrapper relative h-full w-full py-16">
      <div class="grid grid-cols-1 md:grid-cols-3 gap-10">
        {/* Left Column */}
        <div class="col-span-1 md:col-span-2">
          <MovieOverview movie={movie} />
          <MovieMedia movie={movie} client:load />

          {/* Pass sentiment as a prop */}
          <MovieReviews movie={movie} sentiment={sentiment} client:load />
        </div>

        {/* Right Column */}
        <div class="col-span-1">
          <MovieDetails movie={movie} />
          <MovieTags movie={movie} />
          <FinancialOverview movie={movie} />
        </div>
      </div>
    </div>
  </>
</Layout>
