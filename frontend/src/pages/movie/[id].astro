---
import Layout from "../../layouts/Layout.astro";
import * as movieDisplayUtils from "../../utils/movieDisplayUtils.jsx";

export async function getStaticPaths() {
  try {
    const res = await fetch("http://127.0.0.1:5000/movies/ids");
    const data = await res.json();

    console.log("Fetched movie IDs:", data); // <-- Add this

    const paths = data.map((movie: { id: number }) => ({
      params: { id: movie.id.toString() },
    }));

    console.log("Generated static paths:", paths); // <-- Add this too

    return paths;
  } catch (error) {
    console.error("Error generating static paths:", error);
    return [];
  }
}

const { id } = Astro.params;

let movie: {
  budget: number;
  revenue: number;
  title: unknown;
  release_date: any;
  backdrop_url: string | null | undefined;
  poster_url: string | null | undefined;
  vote_average: number;
  vote_count: number;
  runtime: any;
  popularity: number;
  tagline: string;
  status: string;
  genres: string[];
  overview: string;
  keywords: string[];
  cast: any[];
  original_language: string;
  production_countries: string[];
  spoken_languages: string[];
} = {
  budget: 0,
  revenue: 0,
  title: "Unknown",
  release_date: null,
  backdrop_url: null,
  poster_url: null,
  vote_average: 0,
  vote_count: 0,
  runtime: null,
  popularity: 0,
  status: "Unknown",
  genres: [],
  overview: "No overview available.",
  keywords: [],
  cast: [],
  tagline: "No tagline available.",
  original_language: "Unknown",
  production_countries: [],
  spoken_languages: [],
};

let error = null;

try {
  // Fetch movie by ID
  const response = await fetch(`http://127.0.0.1:5000/movies/${id}`);
  if (!response.ok) {
    throw new Error("Movie not found");
  }
  movie = await response.json();
} catch (e) {
  error = e instanceof Error ? e.message : "An unknown error occurred";
}

const profit = movieDisplayUtils.calculateProfit(movie.budget, movie.revenue);
const roi = movieDisplayUtils.calculateROI(movie.budget, movie.revenue);
const width = Math.min(100, movie.popularity / 10); // cap at 100%
---

<Layout
  title={movie
    ? `${movie.title} - (${movieDisplayUtils.getReleaseYear(movie.release_date)}) - CineMind`
    : "Movie Not Found"}
>
  <>
    <!-- Movie Details Layout -->
    <!-- Hero Section -->
    <div class="relative h-[70vh]">
      <div class="absolute inset-0 bg-black">
        <div class="w-full h-full">
          <img
            class="w-full h-full object-cover overflow-hidden"
            src={movie.backdrop_url}
          />
          <div class="absolute inset-0 bg-gradient-to-t from-black to-black/60">
          </div>
        </div>
      </div>
      <!-- Movie Poster -->
      <div class="content-wrapper relative h-full flex items-end pb-16 z-10">
        <div class="flex flex-col md:flex-row gap-8">
          <div class="hidden md:block w-64 flex-shrink-0">
            <img
              class="w-full rounded-md shadow-xl overflow-hidden"
              src={movie.poster_url}
            />
          </div>

          <!-- Title -->
          <div class="flex-1">
            <h1 class="text-4xl md:text-5xl font-bold mb-2 text-white">
              {movie.title}
            </h1>

            <!-- Movie vote badge, vote count, release year and runtime -->
            <div class="flex flex-wrap items-center gap-4 text-slate-400 mb-4">
              {
                movie?.vote_average && (
                  <div
                    class={`inline-flex items-center text-[15px] px-1.5 py-0.5 font-extrabold tracking-wide ${movieDisplayUtils.formatVoteBadge(movie.vote_average)}`}
                  >
                    {movie.vote_average}
                  </div>
                )
              }
              {movie?.vote_count && <span>({movie.vote_count} votes)</span>}

              {
                movie?.release_date && (
                  <span>
                    {movieDisplayUtils.getReleaseYear(movie?.release_date)}
                  </span>
                )
              }

              {
                movie?.runtime && (
                  <span>{movieDisplayUtils.formatRuntime(movie.runtime)}</span>
                )
              }
            </div>

            <!-- Movie Genres List -->
            <div class="flex flex-wrap space-x-2 space-y-2">
              {
                movie.genres &&
                  movie.genres.map((genre: string, index: number) => (
                    <span class="inline-flex items-center justify-center bg-gradient-to-b from-blue-600/40 to-blue-600/20 text-white text-xs font-semibold py-1 px-3 rounded-xl border-1 border-blue-400/50 h-8 min-h-[32px] hover:bg-cyan-500/80 transition-all duration-300">
                      {genre}
                    </span>
                  ))
              }
            </div>

            <!-- Tagline Text -->
            <div class="text-slate-300 text-xl font-light pt-2 tracking-wide">
              {movie.tagline}
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- Hero End -->

    <div class="content-wrapper relative h-full w-full">
      <div class="grid grid-cols-1 md:grid-cols-3 gap-10">
        <!-- Left Column - About -->
        <div class="col-span-1 md:col-span-2">
          <!-- Overview -->
          <h2 class="text-2xl text-white font-bold mb-4">Overview</h2>

          <p class="text-white text-lg font-light mb-4">{movie.overview}</p>

          <!-- Cast -->
          <h3 class="text-xl text-white font-bold mb-4">Cast</h3>
          <div class="flex flex-wrap gap-2">
            {
              movie.cast &&
                movie.cast.map((actor: unknown, index: any) => (
                  <span class="inline-flex items-center justify-center bg-gradient-to-b from-slate-800/50 to-transparent text-white text-sm font-light py-1 px-3 rounded-lg border-1 border-gray-600">
                    {actor}
                  </span>
                ))
            }
          </div>

          <div
            class="flex flex-nowrap items-start space-x-16 text-slate-400 mt-6 mb-4"
          >
            <div>
              <!-- Original Language -->
              <h3 class="text-xl whitespace-nowrap text-white font-bold mb-4">
                Original Language
              </h3>
              <p class="text-white font-light text-xl mb-10">
                {movie.original_language.toUpperCase()}
              </p>
            </div>
            <div>
              <!-- Original Language -->
              <h3 class="text-xl whitespace-nowrap text-white font-bold mb-4">
                Production Countries
              </h3>
              <p class="text-white font-light text-xl mb-10">
                {movie.production_countries.join(", ")}
              </p>
            </div>
            <div>
              <!-- Original Language -->
              <h3 class="text-xl whitespace-nowrap text-white font-bold mb-4">
                Spoken Languages
              </h3>
              <p class="text-white font-light text-xl mb-10">
                {movie.spoken_languages.join(", ")}
              </p>
            </div>
          </div>

          <!-- Financial performance -->
          {
            (movie?.budget > 0 || movie?.revenue > 0) && (
              <div class="bg-gradient-to-b from-slate-800/30 to-transparent shadow-md shadow-blue-400/50 border border-blue-100/50 rounded-lg p-6 mb-8">
                <h3 class="text-xl text-white font-semibold mb-4">
                  Financial Performance
                </h3>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {movie?.budget > 0 && (
                    <div>
                      <h4 class="text-white text-sm">Budget</h4>
                      <p class="text-xl text-white font-light">
                        {movieDisplayUtils.formatMoney(movie.budget)}
                      </p>
                    </div>
                  )}

                  {movie?.revenue > 0 && (
                    <div>
                      <h4 class="text-white text-sm">Box Office Revenue</h4>
                      <p class="text-xl text-white font-light">
                        {movieDisplayUtils.formatMoney(movie.revenue)}
                      </p>
                    </div>
                  )}

                  {profit !== null && (
                    <div>
                      <h4 class="text-white text-sm">Profit / Loss</h4>
                      <p
                        class={`text-xl font-light ${profit >= 0 ? "text-green-500" : "text-red-500"}`}
                      >
                        {movieDisplayUtils.formatMoney(profit)}
                      </p>
                    </div>
                  )}

                  {roi !== null && (
                    <div>
                      <h4 class="text-white text-sm">Return on Investment</h4>
                      <p
                        class={`text-xl font-light ${roi >= 0 ? "text-green-500" : "text-red-500"}`}
                      >
                        {roi.toFixed(2)}%
                      </p>
                    </div>
                  )}
                </div>
              </div>
            )
          }
        </div>

        <!-- Right Column -->
        <div class="col-span-1">
          <!-- First Right Container -->
          <div
            class="bg-gradient-to-b from-slate-800/30 to-transparent shadow-md shadow-blue-400/50 border border-blue-100/50 rounded-lg p-6 pb-10 mb-4 h-fit"
          >
            <h2 class="text-2xl text-white font-bold mb-4 mt-0">
              Movie Details
            </h2>
            <h3 class="text-sm text-slate-400 font-normal tracking-wider mb-1">
              Release Date
            </h3>
            <p class="text-white mb-4">
              {movieDisplayUtils.getReleaseFullDate(movie.release_date)}
            </p>
            <h3 class="text-sm text-slate-400 font-normal tracking-wider mb-1">
              Runtime
            </h3>
            <p class="text-white mb-4">
              {
                movie?.runtime && (
                  <span>{movieDisplayUtils.formatRuntime(movie.runtime)}</span>
                )
              }
            </p>
            <h3 class="text-sm text-slate-400 font-normal tracking-wider mb-1">
              Status
            </h3>
            <p class="text-white mb-4">
              {movie.status}
            </p>
            <h3 class="text-sm text-slate-400 font-normal tracking-wider mb-1">
              User Rating
            </h3>
            {
              movie?.vote_average && (
                <div
                  class={`inline-flex items-center text-[15px] px-1.5 py-0.5 font-extrabold tracking-wide mb-4 ${movieDisplayUtils.formatVoteBadge(movie.vote_average)}`}
                >
                  {movie.vote_average}
                </div>
              )
            }
            <h3 class="text-sm text-slate-400 font-normal tracking-wider mb-1">
              Popularity
            </h3>

            <!-- For some reason, the movieDisplayUtils.formatPopularityBar() does not work here, the function code is rewritten here to make it show -->
            <p class="text-xs text-slate-300 font-light tracking-wide mb-1">
              {Math.floor(width)}%
            </p>
            <div class="w-full h-1 bg-slate-800 rounded-full overflow-hidden">
              <div
                class="h-full bg-gradient-to-r from-cyan-200 to-blue-500"
                style={{ width: `${width}%` }}
              >
              </div>
            </div>
          </div>
          <!-- Second Right Container -->
          <div
            class="bg-gradient-to-b from-slate-800/30 to-transparent shadow-md shadow-blue-400/50 border border-blue-100/50 rounded-lg p-6 pb-10 mb-4 h-fit"
          >
            <h3 class="text-sm text-slate-400 font-normal tracking-wider mb-3">
              Genres
            </h3>
            <!-- Movie Genres List -->
            <div class="flex flex-wrap space-x-2 space-y-2 mb-4">
              {
                movie.genres &&
                  movie.genres.map((genre: string, index: number) => (
                    <span class="inline-flex items-center justify-center bg-gradient-to-b from-blue-600/20 to-transparent text-white text-xs font-semibold py-1 px-3 rounded-xl border-1 border-blue-400/50 h-8 min-h-[32px] hover:bg-cyan-500 transition-all duration-300">
                      {genre}
                    </span>
                  ))
              }
            </div>
            <h3 class="text-sm text-slate-400 font-normal tracking-wider mb-3">
              Keywords
            </h3>
            <div class="flex flex-wrap space-x-2 space-y-2">
              {
                movie.keywords &&
                  movie.keywords.map((keyword: string, index: number) => (
                    <span class="inline-flex items-center justify-center bg-gradient-to-b from-slate-600/50 to-slate-600/20 border border-slate-600/30 text-white tracking-wider text-xs font-light py-1 px-3 rounded-xl h-8 min-h-[32px] hover:bg-slate-300/50 transition-all duration-300">
                      {keyword}
                    </span>
                  ))
              }
            </div>
          </div>
        </div>
      </div>
    </div>
  </>
</Layout>
