---
import Layout from "../../layouts/Layout.astro";
import {
  getReleaseYear,
  formatRuntime,
  formatVoteBadge,
} from "../../utils/movieDisplayUtils";

export async function getStaticPaths() {
  try {
    // // Fetch all movies to generate paths
    // const response = await fetch("http://127.0.0.1:5000/movies");
    // const data = await response.json();
    // const movies = data.movies || []; // Adjust according to your response structure

    // // Generate paths for each movie
    // const paths = movies.map((movie: { id: number }) => ({
    //   params: { id: movie.id.toString() },
    // }));

    // return paths;

    const allMovies = [];
    let page = 1;
    let hasNext = true;

    while (hasNext) {
      const res = await fetch(
        `http://127.0.0.1:5000/movies?page=${page}&per_page=50`
      );
      const data = await res.json();

      allMovies.push(...data.movies);
      hasNext = data.has_next;
      page += 1;
    }

    const paths = allMovies.map((movie: { id: number }) => ({
      params: { id: movie.id.toString() },
    }));
    return paths;
  } catch (error) {
    console.error("Error generating static paths:", error);
    return [];
  }
}

const { id } = Astro.params;

let movie;
let error = null;

try {
  // Fetch movie by ID
  const response = await fetch(`http://127.0.0.1:5000/movies/${id}`);
  if (!response.ok) {
    throw new Error("Movie not found");
  }
  movie = await response.json();
} catch (e) {
  error = e instanceof Error ? e.message : "An unknown error occurred";
}

// Format budget and revenue to USD
const formatMoney = (amount) => {
  if (!amount) return "N/A";
  return new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
    maximumFractionDigits: 0,
  }).format(amount);
};

// Calculate profit and ROI
const calculateProfit = () => {
  if (!movie?.budget || !movie?.revenue) return null;
  return movie.revenue - movie.budget;
};

const calculateROI = () => {
  if (!movie?.budget || !movie?.revenue || movie.budget === 0) return null;
  return ((movie.revenue - movie.budget) / movie.budget) * 100;
};

const profit = calculateProfit();
const roi = calculateROI();
---

<Layout
  title={movie
    ? `${movie.title} - (${getReleaseYear(movie.release_date)}) - CineMind`
    : "Movie Not Found"}
>
  {
    // ERROR Page Layout
    error ? (
      <div class="text-center py-20">
        <h1 class="text-3xl text-red-500 font-bold">Error</h1>
        <p class="text-xl text-gray-300">{error}</p>
        <a href="/movies" class="text-blue-500 underline mt-8">
          Back to Movies
        </a>
      </div>
    ) : (
      // Movie Details Layout
      <>
        {/* Hero Section */}
        <div class="relative h-[70vh]">
          <div class="absolute inset-0 bg-black">
            <div class="w-full h-full">
              <img
                class="w-full h-full object-cover overflow-hidden"
                src={movie.backdrop_url}
              />
              <div class="absolute inset-0 bg-gradient-to-t from-black to-black/60" />
            </div>
          </div>
          {/* Movie Poster */}
          <div class="content-wrapper relative h-full flex items-end pb-16 z-10">
            <div class="flex flex-col md:flex-row gap-8">
              <div class="hidden md:block w-64 flex-shrink-0">
                <img
                  class="w-full rounded-md shadow-xl overflow-hidden"
                  src={movie.poster_url}
                />
              </div>

              {/* Title */}
              <div class="flex-1">
                <h1 class="text-4xl md:text-5xl font-bold mb-2 text-white">
                  {movie.title}
                </h1>

                {/* Movie vote badge, vote count, release year and runtime */}
                <div class="flex flex-wrap items-center gap-4 text-slate-400 mb-4">
                  {movie?.vote_average && (
                    <div
                      class={`inline-flex items-center text-[15px] px-1.5 py-0.5 font-extrabold tracking-wide ${formatVoteBadge(movie.vote_average)}`}
                    >
                      {movie.vote_average}
                    </div>
                  )}
                  {movie?.vote_count && <span>({movie.vote_count} votes)</span>}

                  {movie?.release_date && (
                    <span>{getReleaseYear(movie?.release_date)}</span>
                  )}

                  {movie?.runtime && (
                    <span>{formatRuntime(movie.runtime)}</span>
                  )}
                </div>

                {/* Movie Genres List */}
                <div class="flex flex-wrap space-x-2 space-y-2">
                  {movie.genres &&
                    movie.genres.map((genre: string, index: number) => (
                      <span
                        key={index}
                        class="inline-flex items-center justify-center bg-black/30 text-white text-xs font-semibold py-1 px-3 rounded-xl border-1 border-blue-400 h-8 min-h-[32px] hover:bg-cyan-500/80 transition-all duration-300"
                      >
                        {genre}
                      </span>
                    ))}
                </div>

                {/* Overview Text */}
                <div class="text-slate-300 text-xl pt-2 tracking-wide">
                  {movie.overview}
                </div>
              </div>
            </div>
          </div>
        </div>
        {/* Hero End */}

        <div class="content-wrapper relative h-full w-full">
          <div class="grid grid-cols-1 md:grid-cols-3 gap-10">
            {/* Left Column - About*/}
            <div class="col-span-2">
              <h2 class="text-2xl text-white font-bold mb-4">Overview</h2>

              <p class="text-white text-lg mb-4">{movie.overview}</p>

              <h2 class="text-xl text-white font-bold mb-4">Cast</h2>
              <div class="flex flex-wrap gap-2">
                {movie.cast &&
                  movie.cast.map((actor, index) => (
                    <span
                      key={index}
                      class="inline-flex items-center justify-center bg-gray-800 text-white text-sm font-semibold py-1 px-3 rounded-lg border-1 border-gray-600"
                    >
                      {actor}
                    </span>
                  ))}
              </div>
              <h2 class="text-xl text-white font-bold mt-6 mb-4">
                Original Language
              </h2>
              <p class="text-white text-xl mb-10">
                {movie.original_language.toUpperCase()}
              </p>

              {/* Financial performance */}
              {(movie?.budget > 0 || movie?.revenue > 0) && (
                <div class="bg-slate-800 rounded-lg p-6 mb-8">
                  <h3 class="text-lg text-white font-semibold mb-4">
                    Financial Performance
                  </h3>
                  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {movie?.budget > 0 && (
                      <div>
                        <h4 class="text-white text-sm">Budget</h4>
                        <p class="text-xl text-white">
                          {formatMoney(movie.budget)}
                        </p>
                      </div>
                    )}

                    {movie?.revenue > 0 && (
                      <div>
                        <h4 class="text-white text-sm">Box Office Revenue</h4>
                        <p class="text-xl text-white">
                          {formatMoney(movie.revenue)}
                        </p>
                      </div>
                    )}

                    {profit !== null && (
                      <div>
                        <h4 class="text-white text-sm">Profit/Loss</h4>
                        <p
                          class={`text-xl ${profit >= 0 ? "text-green-500" : "text-red-500"}`}
                        >
                          {formatMoney(profit)}
                        </p>
                      </div>
                    )}

                    {roi !== null && (
                      <div>
                        <h4 class="text-white text-sm">Return on Investment</h4>
                        <p
                          class={`text-xl ${roi >= 0 ? "text-green-500" : "text-red-500"}`}
                        >
                          {roi.toFixed(2)}%
                        </p>
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </>
    )
  }
</Layout>
